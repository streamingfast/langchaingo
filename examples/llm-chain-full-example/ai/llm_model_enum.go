// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package ai

import (
	"errors"
	"fmt"
)

const (
	// LLMModelGpt4O is a LLMModel of type gpt-4o.
	LLMModelGpt4O LLMModel = "gpt-4o"
	// LLMModelGpt4OMini is a LLMModel of type gpt-4o-mini.
	LLMModelGpt4OMini LLMModel = "gpt-4o-mini"
	// LLMModelClaude35Haiku is a LLMModel of type claude-3-5-haiku.
	LLMModelClaude35Haiku LLMModel = "claude-3-5-haiku"
	// LLMModelClaude35Sonnet is a LLMModel of type claude-3-5-sonnet.
	LLMModelClaude35Sonnet LLMModel = "claude-3-5-sonnet"
)

var ErrInvalidLLMModel = errors.New("not a valid LLMModel")

// String implements the Stringer interface.
func (x LLMModel) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x LLMModel) IsValid() bool {
	_, err := ParseLLMModel(string(x))
	return err == nil
}

var _LLMModelValue = map[string]LLMModel{
	"gpt-4o":            LLMModelGpt4O,
	"gpt-4o-mini":       LLMModelGpt4OMini,
	"claude-3-5-haiku":  LLMModelClaude35Haiku,
	"claude-3-5-sonnet": LLMModelClaude35Sonnet,
}

// ParseLLMModel attempts to convert a string to a LLMModel.
func ParseLLMModel(name string) (LLMModel, error) {
	if x, ok := _LLMModelValue[name]; ok {
		return x, nil
	}
	return LLMModel(""), fmt.Errorf("%s is %w", name, ErrInvalidLLMModel)
}
